/****************************************************************************/
/*                                                                          */
/*    新核科技(广州)有限公司                                                */
/*                                                                          */
/*    Copyright (C) 2022 CoreKernel Technology (Guangzhou) Co., Ltd         */
/*                                                                          */
/****************************************************************************/
/*
 *    - 希望缄默(bin wang)
 *    - bin@corekernel.net
 *
 *    官网 corekernel.net/.org/.cn
 *    社区 fpga.net.cn
 *
 */

/****************************************************************************/
/*                                                                          */
/*              BIOS                                                        */
/*                                                                          */
/****************************************************************************/
/* 系统栈(ISR 及 Swi) */
Program.stack = 16 * 1024;

var BIOS = xdc.useModule('ti.sysbios.BIOS');
BIOS.libType = BIOS.LibType_Debug;
BIOS.libDir = "../../BIOS";
BIOS.customCCOpts = "-mv6740 --abi=eabi -q -mi10 -mo -pdr -pden -pds=238 -pds=880 -pds1110  --program_level_compile -g";
BIOS.assertsEnabled = true;
BIOS.logsEnabled = true;
BIOS.heapTrackEnabled = true;

/****************************************************************************/
/*                                                                          */
/*              内存                                                        */
/*                                                                          */
/****************************************************************************/
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');

/* 创建一个 名为 "SystemHeap" 的 HeapMem */
var SystemHeapParams = new HeapMem.Params;
SystemHeapParams.size = 32 * 1024 * 1024;
SystemHeapParams.sectionName = "SystemHeap";

/* 创建为全局变量以便可以在 C 文件中使用 */
Program.global.SystemHeap = HeapMem.create(SystemHeapParams);

var Memory = xdc.useModule('xdc.runtime.Memory')
/* 设置 "SystemHeap" 作为默认 Heap */
/* Memory_alloc() 调用时指定堆为 NULL 所使用的堆 */
Memory.defaultHeapInstance = Program.global.SystemHeap;

/* 存储空间分配 */
Program.sectMap["SystemHeap"] = "DDR2";

/****************************************************************************/
/*                                                                          */
/*              线程                                                        */
/*                                                                          */
/****************************************************************************/
var Swi   = xdc.useModule('ti.sysbios.knl.Swi');
var Task  = xdc.useModule('ti.sysbios.knl.Task');
var Idle  = xdc.useModule('ti.sysbios.knl.Idle');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');

/* 组合事件 */
var EventCombiner = xdc.useModule('ti.sysbios.family.c64p.EventCombiner');
EventCombiner.eventGroupHwiNum[0] = 7;
EventCombiner.eventGroupHwiNum[1] = 8;
EventCombiner.eventGroupHwiNum[2] = 9;
EventCombiner.eventGroupHwiNum[3] = 10;

/****************************************************************************/
/*                                                                          */
/*              EMAC                                                        */
/*                                                                          */
/****************************************************************************/
// 使用 OMAPL138 EMAC 驱动
xdc.useModule('ti.drv.omapl138.Emac');

/****************************************************************************/
/*                                                                          */
/*              NDK 网络                                                    */
/*                                                                          */
/****************************************************************************/
var Global = xdc.useModule('ti.ndk.config.Global');
Global.enableCodeGeneration = false;

/****************************************************************************/
/*                                                                          */
/*              异常处理                                                    */
/*                                                                          */
/****************************************************************************/
var Exception = xdc.useModule('ti.sysbios.family.c64p.Exception');
Exception.enableExternalMPC = true;
Exception.exceptionHook = "&ExceptionHook";
Exception.internalHook = "&InternalExceptionHook";
Exception.nmiHook = "&NMIHook";
Exception.externalHook = "&ExternalExceptionHook";
Exception.returnHook = "&ExceptionReturnHook";

/****************************************************************************/
/*                                                                          */
/*              日志                                                        */
/*                                                                          */
/****************************************************************************/
var LoggerSys = xdc.useModule('xdc.runtime.LoggerSys');
var LoggerSysParams = new LoggerSys.Params();
var LoggerDefaults = LoggerSys.create(LoggerSysParams);

var Defaults = xdc.useModule('xdc.runtime.Defaults');
Defaults.common$.namedInstance = true;
Defaults.common$.logger = LoggerDefaults;

var Main  = xdc.useModule('xdc.runtime.Main');
var Diags = xdc.useModule('xdc.runtime.Diags');
Diags.setMaskMeta('xdc.runtime.Main', Diags.ALL, Diags.RUNTIME_ON);
/*
var System = xdc.useModule("xdc.runtime.System");
var SysStd = xdc.useModule('xdc.runtime.SysStd');
System.SupportProxy = SysStd;
*/
var SysMin = xdc.useModule('xdc.runtime.SysMin');
SysMin.outputFxn = "&ConsoleLogger";

var System = xdc.useModule('xdc.runtime.System');
System.SupportProxy = SysMin;

var Text = xdc.useModule('xdc.runtime.Text');
Text.isLoaded = true;

/****************************************************************************/
/*                                                                          */
/*              UIA 系统分析                                                */
/*                                                                          */
/****************************************************************************/
/* UIA */
/*
var LoggingSetup = xdc.useModule('ti.uia.sysbios.LoggingSetup');
LoggingSetup.sysbiosHwiLogging = true;
LoggingSetup.sysbiosSwiLogging = true;
LoggingSetup.sysbiosHwiLoggingRuntimeControl = true;
LoggingSetup.sysbiosSwiLoggingRuntimeControl = true;
LoggingSetup.eventUploadMode = LoggingSetup.UploadMode_NONJTAGTRANSPORT;
LoggingSetup.loadLoggerSize = 1024;
LoggingSetup.mainLoggerSize = 32768;
LoggingSetup.sysbiosLoggerSize = 32768;

var ServiceMgr = xdc.useModule('ti.uia.runtime.ServiceMgr');
ServiceMgr.topology = ServiceMgr.Topology_SINGLECORE;
ServiceMgr.transportType = ServiceMgr.TransportType_ETHERNET;

var UIABenchmark = xdc.useModule('ti.uia.events.UIABenchmark');
var UIABenchmark = xdc.useModule('ti.uia.events.UIAProfile');
*/
var Load = xdc.useModule('ti.sysbios.utils.Load');
Load.hwiEnabled = true;
Load.swiEnabled = true;

/****************************************************************************/
/*                                                                          */
/*              计时服务                                                    */
/*                                                                          */
/****************************************************************************/
var Timer64 = xdc.useModule('ti.sysbios.timers.timer64.Timer');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
Clock.tickPeriod = 1000;     // 系统时间基准 1000us
